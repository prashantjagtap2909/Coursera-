Problem Set # 2 (Basic Datastructures and Heaps)

Problem 1 (Least-k Elements Datastructure)


class MinHeap:
    def __init__(self):
        self.H = [None]
 
    def size(self):
        return len(self.H)-1
    
    def __repr__(self):
        return str(self.H[1:])
        
    def satisfies_assertions(self):
        for i in range(2, len(self.H)):
            assert self.H[i] >= self.H[i//2],  f'Min heap property fails at position {i//2}, parent elt: {self.H[i//2]}, child elt: {self.H[i]}'
    
    def min_element(self):
        return self.H[1]

    ## bubble_up function at index
   
    def bubble_up(self, index):
        assert index >= 1
        if index == 1: 
            return 
        parent_index = index // 2
        if self.H[parent_index] < self.H[index]:
            return 
        else:
            self.H[parent_index], self.H[index] = self.H[index], self.H[parent_index]
            self.bubble_up(parent_index)
    
    ## bubble_down function at index
    
    def bubble_down(self, index):
        assert index >= 1 and index < len(self.H)
        lchild_index = 2 * index
        rchild_index = 2 * index + 1
        
        lchild_value = self.H[lchild_index] if lchild_index < len(self.H) else float('inf')
        
        rchild_value = self.H[rchild_index] if rchild_index < len(self.H) else float('inf')
        
        if self.H[index] <= min(lchild_value, rchild_value):
            return 
        
        min_child_value, min_child_index = min ((lchild_value, lchild_index), (rchild_value, rchild_index))
       
        self.H[index], self.H[min_child_index] = self.H[min_child_index], self.H[index]
        # Bubble down on the minimum child index
        self.bubble_down(min_child_index)
        
        
   
    def insert(self, elt):
        # your code here
        
        self.H.append(elt)
        assert self.H[self.size()] == elt
        
        self.bubble_up(self.size())
        
        
    # Function: heap_delete_min
   
    def delete_min(self):
        # your code here
        
        if self.size() > 1:
            self.H[1] = self.H.pop(-1)
            self.bubble_down(1)
        else:
            self.H.pop(-1)
        # First let us complete a minheap data structure.




class MinHeap:
    def __init__(self):
        self.H = [None]
 
    def size(self):
        return len(self.H)-1
    
    def __repr__(self):
        return str(self.H[1:])
        
    def satisfies_assertions(self):
        for i in range(2, len(self.H)):
            assert self.H[i] >= self.H[i//2],  f'Min heap property fails at position {i//2}, parent elt: {self.H[i//2]}, child elt: {self.H[i]}'
    
    def min_element(self):
        return self.H[1]

    ## bubble_up function at index
    
    def bubble_up(self, index):
        assert index >= 1
        if index == 1: 
            return 
        parent_index = index // 2
        if self.H[parent_index] < self.H[index]:
            return 
        else:
            self.H[parent_index], self.H[index] = self.H[index], self.H[parent_index]
            return self.bubble_up(parent_index)
    
    
    def bubble_down(self, index):
        assert index >= 1 and index < len(self.H)
        lchild_index = 2 * index
        rchild_index = 2 * index + 1
       
        lchild_value = self.H[lchild_index] if lchild_index < len(self.H) else float('inf')
        
        rchild_value = self.H[rchild_index] if rchild_index < len(self.H) else float('inf')
        
        if self.H[index] <= min(lchild_value, rchild_value):
            return 
        
        min_child_value, min_child_index = min ((lchild_value, lchild_index), (rchild_value, rchild_index))
        
        self.H[index], self.H[min_child_index] = self.H[min_child_index], self.H[index]
        
        self.bubble_down(min_child_index)
        
        
    
    def insert(self, elt):
        # your code here
       
        self.H.append(elt)
        assert self.H[self.size()] == elt
        
        self.bubble_up(self.size())
        
        
    
    def delete_min(self):
        # your code here
       #student name Prashant Jagtap
        if self.size() > 1:
            self.H[1] = self.H.pop(-1)
            self.bubble_down(1)
        else:
            self.H.pop(-1)
******************************************************************************************************

class TopKHeap:
    
    # The constructor of the class to initialize an empty data structure
    def __init__(self, k):
        self.k = k
        self.A = []
        self.H = MinHeap()
        
    def size(self): 
        return len(self.A) + (self.H.size())
    
    def get_jth_element(self, j):
        assert 0 <= j < self.k-1
        assert j < self.size()
        return self.A[j]
    
    def satisfies_assertions(self):
        # is self.A sorted
        for i in range(len(self.A) -1 ):
            assert self.A[i] <= self.A[i+1], f'Array A fails to be sorted at position {i}, {self.A[i], self.A[i+1]}'
        
        self.H.satisfies_assertions()
        # is every element of self.A less than or equal to each element of self.H
        for i in range(len(self.A)):
            assert self.A[i] <= self.H.min_element(), f'Array element A[{i}] = {self.A[i]} is larger than min heap element {self.H.min_element()}'
   ced)
    def insert_into_A(self, elt):
        k = self.k
        print("k = ", k)
#         assert(self.size() < k)
        self.A.append(elt)
        j = len(self.A)-1
        while (j >= 1 and self.A[j] < self.A[j-1]):
            # Swap A[j] and A[j-1]
            (self.A[j], self.A[j-1]) = (self.A[j-1], self.A[j])
            j = j -1 
        return
    
            
    
    def insert(self, elt):
        size = self.size()
        # If we have fewer than k elements, handle that in a special manner
        if size <= self.k:
            self.insert_into_A(elt)
            return 
       
        self.insert_into_A(elt)
        self.H.insert(self.A.pop(-1))
   
    def delete_top_k(self, j):
        k = self.k
        assert self.size() > k # we need not handle the case when size is less than or equal to k
        assert j >= 0
        assert j < self.k
        # your code here
        
        self.A.pop(j)
        self.A.append(self.H.min_element())
        self.H.delete_min()
      
      
  ****************************************************************************************************************************
        
